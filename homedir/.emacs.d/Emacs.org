

#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#tips-for-use][Tips for Use]]
- [[#global-settings][Global Settings]]
  - [[#default-font-size][Default font size]]
  - [[#y-or-n][Y or N]]
  - [[#disable-autosave][Disable AutoSave]]
- [[#startup-performance][Startup Performance]]
- [[#package-management][Package Management]]
- [[#mac-setup][Mac Setup]]
- [[#keyboard-bindings][Keyboard Bindings]]
  - [[#esc-cancels-all][ESC Cancels All]]
  - [[#keybinding-panel-which-key][Keybinding Panel (which-key)]]
  - [[#simplify-leader-bindings-generalel][Simplify Leader Bindings (general.el)]]
  - [[#goto-line][GoTo Line]]
  - [[#moveby-words][MoveBy Words]]
- [[#general-configuration][General Configuration]]
  - [[#keep-folders-clean][Keep Folders Clean]]
  - [[#cousel][Cousel]]
  - [[#user-interface][User Interface]]
  - [[#theme][Theme]]
  - [[#font][Font]]
    - [[#set-the-font][Set the font]]
  - [[#mode-line][Mode Line]]
    - [[#basic-customization][Basic Customization]]
    - [[#enable-mode-diminishing][Enable Mode Diminishing]]
    - [[#all-the-icons][All The Icons]]
    - [[#doom-modeline][Doom Modeline]]
  - [[#ui-toggles][UI Toggles]]
  - [[#highlight-matching-braces][Highlight Matching Braces]]
  - [[#displaying-world-time][Displaying World Time]]
- [[#editing-configuration][Editing Configuration]]
  - [[#tab-widths][Tab Widths]]
  - [[#use-spaces-instead-of-tabs-for-indentation][Use spaces instead of tabs for indentation]]
  - [[#commenting-lines][Commenting Lines]]
  - [[#automatically-clean-whitespace][Automatically clean whitespace]]
- [[#stateful-keymaps-with-hydra][Stateful Keymaps with Hydra]]
- [[#better-completions-with-ivy][Better Completions with Ivy]]
- [[#improved-candidate-sorting-with-prescientel][Improved Candidate Sorting with prescient.el]]
- [[#jumping-with-avy][Jumping with Avy]]
- [[#vterm][VTerm]]
- [[#window-management][Window Management]]
  - [[#frame-scaling--zooming][Frame Scaling / Zooming]]
  - [[#window-selection-with-ace-window][Window Selection with ace-window]]
  - [[#set-margins-for-modes][Set Margins for Modes]]
- [[#expand-region][Expand Region]]
- [[#file-browsing][File Browsing]]
  - [[#neo-tree][Neo Tree]]
- [[#org-mode][Org Mode]]
  - [[#better-font-faces][Better Font Faces]]
  - [[#basic-config][Basic Config]]
    - [[#nicer-heading-bullets][Nicer Heading Bullets]]
    - [[#center-org-buffers][Center Org Buffers]]
  - [[#configure-babel-languages][Configure Babel Languages]]
  - [[#structure-templates][Structure Templates]]
  - [[#auto-tangle-configuration-files][Auto-tangle Configuration Files]]
  - [[#pomodoro][Pomodoro]]
  - [[#bindings][Bindings]]
  - [[#update-table-of-contents-on-save][Update Table of Contents on Save]]
- [[#development][Development]]
  - [[#projectile][Projectile]]
    - [[#initial-setup][Initial Setup]]
  - [[#git][Git]]
    - [[#magit][Magit]]
    - [[#forge][Forge]]
    - [[#magit-todos][magit-todos]]
    - [[#git-link][git-link]]
    - [[#git-gutter][Git Gutter]]
  - [[#languages][Languages]]
    - [[#language-server-support][Language Server Support]]
    - [[#meta-lisp][Meta Lisp]]
    - [[#typescript-and-javascript][TypeScript and JavaScript]]
    - [[#rust][Rust]]
    - [[#emacs-lisp][Emacs Lisp]]
    - [[#markdown][Markdown]]
    - [[#yaml][YAML]]
  - [[#productivity][Productivity]]
    - [[#syntax-checking-with-flycheck][Syntax checking with Flycheck]]
    - [[#multiple-cursors][Multiple Cursors]]
    - [[#prettier][Prettier]]
    - [[#company][Company]]
    - [[#snippets][Snippets]]
    - [[#smart-parens][Smart Parens]]
    - [[#rainbow-delimiters][Rainbow Delimiters]]
    - [[#rainbow-mode][Rainbow Mode]]
  - [[#tools][Tools]]
:END:

* Tips for Use

In this document there are links in many places that lead you to documentation for the various packages we use.  If you're looking at this file in Emacs, you can put your cursor on a link and press =C-c C-o= or run =M-x org-open-at-point= to open the link in your web browser.

* Global Settings

This file generates [[file:init.el][init.el]] which can be loaded by Emacs at startup.

#+begin_src emacs-lisp

  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

  (defvar emacs-home "~/.emacs.d/")
  ;; (add-to-list 'load-path emacs-home)

  (setq custom-file (concat emacs-home "custom.el"))
  (load custom-file)

  (defvar packages-dir (concat emacs-home "packages"))
  (setq package-user-dir packages-dir)

  (setq user-full-name "Bry Zettler"
    user-mail-address "bryanzettler@gmail.com")

  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  (setq backup-directory-alist '((".*" . "~/.Trash")))

  ;; (electric-pair-mode 1)
  (delete-selection-mode 1)
  ;; (show-paren-mode t)
  ;; (setq electric-pair-pairs '(
    ;; (?\' . ?\')
    ;; (?\` . ?\`)))

#+end_src

** Default font size

#+begin_src emacs-lisp

  ;; You will most likely need to adjust this font size for your system!
  (defvar zyrb/default-font-size 120)
  (defvar zyrb/default-variable-font-size 120)

#+end_src

** Y or N

Use y or n instead of yes or no

#+begin_src emacs-lisp

;; Use y or n instead of yes or no
(fset 'yes-or-no-p 'y-or-n-p)

#+end_src

** Disable AutoSave

Becuase its slow

#+begin_src emacs-lisp

(setq auto-save-default nil)
(auto-save-mode -1)

#+end_src

* Startup Performance

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 6 100 1000 1000))
  (setq read-process-output-max (* 2 1024 1024)) ;; 1mb

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src

* Package Management

Set up ELPA, MELPA, and Org package repositories and load =use-package= to manage package configuration.

#+begin_src emacs-lisp

  ;; Initialize package sources

  (require 'package)

  (setq package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")
          ("gnu" . "http://elpa.gnu.org/packages/")
          ("org" . "https://orgmode.org/elpa/")))

  (package-initialize)
  (package-refresh-contents)

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Mac Setup

#+begin_src emacs-lisp

  ;; mac specific settings
  ;; Ensure environment variables inside Emacs look the same as in the user's shell.
  ;; only need exec-path-from-shell on OSX
  ;; this hopefully sets up path and other vars better
  (use-package exec-path-from-shell)
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))

#+end_src

* Keyboard Bindings

** ESC Cancels All

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Keybinding Panel (which-key)

[[https://github.com/justbur/emacs-which-key][which-key]] is great for getting an overview of what keybindings are available
based on the prefix keys you entered.  Learned about this one from Spacemacs.

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

** Simplify Leader Bindings (general.el)

[[https://github.com/noctuid/general.el][general.el]] is a fantastic library for defining prefixed keybindings, especially
in conjunction with Evil modes.

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer zyrb/leader-key-def
      :keymaps 'override
      :prefix "M-SPC"))

#+end_src

;;** Enable keychord bind with use-package

#+begin_src emacs-lisp

  (use-package use-package-chords
    :disabled
    :config (key-chord-mode 1))

#+end_src

** GoTo Line

#+begin_src emacs-lisp

  (define-key global-map (kbd "M-g") 'goto-line)

#+end_src

** MoveBy Words

#+begin_src emacs-lisp

  (define-key global-map (kbd "M-<right>") 'forward-word)
  (define-key global-map (kbd "M-<left>") 'backward-word)

#+end_src

* General Configuration

** Keep Folders Clean

#+begin_src emacs-lisp

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
    `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

** Cousel

#+begin_src emacs-lisp

  (use-package counsel)

#+end_src

** User Interface

Clean up Emacs' user interface, make it more minimal.

#+begin_src emacs-lisp

  ;; Thanks, but no thanks
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)            ; Disable visible scrollbar
  (tool-bar-mode -1)              ; Disable the toolbar
  (tooltip-mode -1)               ; Disable tooltips
  (set-fringe-mode 10)             ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

#+end_src

Improve scrolling

#+begin_src emacs-lisp

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a timesetq use-dialog-box nil ; Disable dialog boxes since they weren't working in Mac OSX

#+end_src

Enable line numbers and customize their format.

#+begin_src emacs-lisp

  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                 prog-mode-hook
                 conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the about
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

Don't warn for large files

#+begin_src emacs-lisp

  (setq large-file-warning-threshold nil)

#+end_src

Don't warn for following symlinked files

#+begin_src emacs-lisp

  (setq vc-follow-symlinks t)

#+end_src

Don't wan when advice is added for functions

#+begin_src emacs-lisp

  (setq ad-redefinition-action 'accept)

#+end_src

** Theme

#+begin_src emacs-lisp

  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-palenight t)
    ;;(load-theme 'doom-dracula t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))

  (set-face-attribute 'fringe nil ; Give fringe same color as theme background
    :foreground (face-foreground 'default)
    :background (face-background 'default))

  ;; (set-face-attribute 'region nil :background "#666")

#+end_src

** Font
*** Set the font

Different platforms need different default font sizes, and Fira Mono is currently my favorite face.

#+begin_src emacs-lisp

  ;; Set the font face
  (set-face-attribute 'default nil :font "Hack Nerd Font" :height 110)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Hack Nerd Font" :height 120)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 140 :weight 'regular)

#+end_src

** Mode Line
*** Basic Customization

#+begin_src emacs-lisp

  (setq display-time-format "%l:%M %p %b %y"
        display-time-default-load-average nil)

#+end_src

*** Enable Mode Diminishing

The [[https://github.com/myrjola/diminish.el][diminish]] package hides pesky minor modes from the modelines.

#+begin_src emacs-lisp

  (use-package diminish)

#+end_src

*** All The Icons

#+begin_src emacs-lisp

  (use-package all-the-icons
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :init
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t)))

  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

*** Doom Modeline

#+begin_src emacs-lisp

  (use-package minions
    :hook (doom-modeline-mode . minions-mode)
    :custom
    (minions-mode-line-lighter ""))

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc nil)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil))

#+end_src

** UI Toggles

#+begin_src emacs-lisp

  (zyrb/leader-key-def
    "t"  '(:ignore t :which-key "toggles")
    "tw" 'whitespace-mode
    "tt" '(counsel-load-theme :which-key "choose theme"))

#+end_src

** Highlight Matching Braces

#+begin_src emacs-lisp

  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))

#+end_src

** Displaying World Time

=display-time-world= command provides a nice display of the time at a specified
list of timezones.  Nice for working in a team with remote members.

#+begin_src emacs-lisp

  (setq display-time-world-list
    '(("America/Chicago" "Chicago")
      ("America/Los_Angeles" "Los Angeles")
      ("America/New_York" "New York")
      ("Europe/Athens" "Athens")
      ("Pacific/Auckland" "Auckland")
      ("Asia/Shanghai" "Shanghai")))
      (setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")

#+end_src

* Editing Configuration

** Tab Widths

Default to an indentation size of 2 spaces since it's the norm for pretty much every language I use.

#+begin_src emacs-lisp

  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)

#+end_src

** Use spaces instead of tabs for indentation

#+begin_src emacs-lisp

  (setq-default indent-tabs-mode nil)

#+end_src

** Commenting Lines

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Automatically clean whitespace

#+begin_src emacs-lisp

  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))

#+end_src

* Stateful Keymaps with Hydra

#+begin_src emacs-lisp

  (use-package hydra :defer 1)

#+end_src

* Better Completions with Ivy

I currently use Ivy, Counsel, and Swiper to navigate around files, buffers, and
projects super quickly.  Here are some workflow notes on how to best use Ivy:

- While in an Ivy minibuffer, you can search within the current results by using =S-Space=.
- To quickly jump to an item in the minibuffer, use =C-'= to get Avy line jump keys.
- To see actions for the selected minibuffer item, use =M-o= and then press the
  action's key.
- *Super useful*: Use =C-c C-o= to open =ivy-occur= to open the search results in a
  separate buffer.  From there you can click any item to perform the ivy action.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           :map ivy-switch-buffer-map
           ("C-d" . ivy-switch-buffer-kill))
    :config
    (ivy-mode 1))

  ;; (use-package ivy-hydra
  ;;   :defer t
  ;;   :after hydra)

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-x b" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))

#+end_src

* Improved Candidate Sorting with prescient.el

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
                                          ;(prescient-persist-mode 1)
    (ivy-prescient-mode 1))

  ;; (use-package ivy-posframe
  ;;   :init
  ;;   (ivy-posframe-mode 1)
  ;;   :custom
  ;;   (ivy-posframe-width      115)
  ;;   (ivy-posframe-min-width  115)
  ;;   (ivy-posframe-height     10)
  ;;   (ivy-posframe-min-height 10)
  ;;   :config
  ;;   (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
  ;;   (setq ivy-posframe-parameters '((left-fringe . 8)
  ;;                                   (right-fringe . 8))))

  (zyrb/leader-key-def
    "r"   '(ivy-resume :which-key "ivy resume")
    "f"   '(:ignore t :which-key "files")
    "ff"  '(counsel-find-file :which-key "open file")
    "C-f" 'counsel-find-file
    "fr"  '(counsel-recentf :which-key "recent files")
    "fR"  '(revert-buffer :which-key "revert file")
    "fj"  '(counsel-file-jump :which-key "jump to file"))

#+end_src

* Jumping with Avy

#+begin_src emacs-lisp

  (use-package avy
    :commands (avy-goto-char avy-goto-word-0 avy-goto-line))

  (zyrb/leader-key-def
    "j"   '(:ignore t :which-key "jump")
    "jj"  '(avy-goto-char :which-key "jump to char")
    "jw"  '(avy-goto-word-0 :which-key "jump to word")
    "jl"  '(avy-goto-line :which-key "jump to line"))

#+end_src

* VTerm

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq vterm-shell "zsh")
    (setq vterm-max-scrollback 10000)
    (add-to-list 'vterm-eval-cmds '("update-pwd" (lambda (path) (setq default-directory path)))))

#+end_src

* Window Management

** Frame Scaling / Zooming

The keybindings for this are =C+M+-= and =C+M+==.

#+begin_src emacs-lisp

  (use-package default-text-scale
    :defer 1
    :config
    (default-text-scale-mode))

#+end_src

** Window Selection with ace-window

#+begin_src emacs-lisp

  (use-package ace-window
    :bind (("C-x o" . ace-window))
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

#+end_src

** Set Margins for Modes

#+begin_src emacs-lisp

  (defun zyrb/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . zyrb/org-mode-visual-fill))

#+end_src

* Expand Region

#+begin_src emacs-lisp

  (use-package expand-region
    :bind (("C-x ;" . er/expand-region)
           ("C-x '" . er/mark-outside-pairs)))

#+end_src

* File Browsing

** Neo Tree

#+begin_src emacs-lisp

  (defun neotree-project-dir ()
    "Open NeoTree using the project root, using find-file-in-project,
      or the current buffer directory."
    (interactive)
    (let ((project-dir
           (ignore-errors
                 ;;; Pick one: projectile or find-file-in-project
             (projectile-project-root)
             ;; (ffip-project-root)
             ))
          (file-name (buffer-file-name))
          (neo-smart-open t))
      (if (and (fboundp 'neo-global--window-exists-p)
               (neo-global--window-exists-p))
          (neotree-hide)
        (progn
          (neotree-show)
          (if project-dir
              (neotree-dir project-dir))
          (if file-name
              (neotree-find file-name))))))

  (use-package neotree
    :after (all-the-icons)
    :pin melpa
    :bind (:map neotree-mode-map
                ("RET" . neotree-enter)
                ("TAB" . neotree-enter))
    :config
    (add-hook 'neo-after-create-hook (lambda (&rest _) (display-line-numbers-mode -1)))
    (setq neo-autorefresh t
          neo-show-hidden-files t
          neo-force-change-root t
          neo-create-file-auto-open t
          neo-theme (if (display-graphic-p) 'icons 'arrow)))

  (zyrb/leader-key-def
    "fb" '(neotree-project-dir :which-key "neo tree"))

#+end_src

* Org Mode


[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

The =zyrb/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun zyrb/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.

#+begin_src emacs-lisp

  (defun zyrb/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . zyrb/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-directory "~/Documents/Dropbox/OrgFiles")

    (setq org-agenda-files `(,org-directory))

    (defun zyrb/org-path (path)
      (expand-file-name path org-directory))

    (setq org-default-notes-file (zyrb/org-path "Tasks.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets '((nil :maxlevel . 1)
      (org-agenda-files :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp+datetree ,(zyrb/org-path "Tasks.org") "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree ,(zyrb/org-path "Journal.org"))
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree ,(zyrb/org-path "Journal.org"))
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree ,(zyrb/org-path "Journal.org"))
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline ,(zyrb/org-path "Metrics.org") "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (zyrb/org-font-setup))

#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun zyrb/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . zyrb/org-mode-visual-fill))

#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (js . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

;; This is needed as of Org 9.
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))

(defun org-babel-execute:typescript (body params)
  (let ((org-babel-js-cmd "npx ts-node --compiler-options='{\"lib\": [\"es2016\", \"dom\"], \"downlevelIteration\": true}' < "))
    (org-babel-execute:js body params)))

(defalias 'org-babel-execute:ts 'org-babel-execute:typescript)

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =zyrb/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun zyrb/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'zyrb/org-babel-tangle-config)))

#+end_src

** Pomodoro

#+begin_src emacs-lisp
  (use-package org-pomodoro
    :after org
    :config
    (setq org-pomodoro-start-sound "~/.emacs.d/sounds/focus_bell.wav")
    (setq org-pomodoro-short-break-sound "~/.emacs.d/sounds/three_beeps.wav")
    (setq org-pomodoro-long-break-sound "~/.emacs.d/sounds/three_beeps.wav")
    (setq org-pomodoro-finished-sound "~/.emacs.d/sounds/meditation_bell.wav")

    (zyrb/leader-key-def
      "op"  '(org-pomodoro :which-key "pomodoro")))
#+end_src

** Bindings

#+begin_src emacs-lisp

  (zyrb/leader-key-def
    "o"   '(:ignore t :which-key "org mode")
    "oi"  '(:ignore t :which-key "insert")
    "oil" '(org-insert-link :which-key "insert link")
    "on"  '(org-toggle-narrow-to-subtree :which-key "toggle narrow")
    "oa"  '(org-agenda :which-key "status")
    "oc"  '(org-capture t :which-key "capture")
    "os"  '(org-schedule :which-key "schedule")
    "ox"  '(org-export-dispatch t :which-key "export"))

#+end_src

** Update Table of Contents on Save

It’s nice to have a table of contents section for long literate configuration files (like this one!) so I use org-make-toc to automatically update the ToC in any header with a property named TOC.

#+begin_src emacs-lisp

  (use-package org-make-toc
    :hook (org-mode . org-make-toc-mode))

#+end_src

* Development

Configuration for various programming languages and dev tools that I use.

** Projectile

*** Initial Setup

#+begin_src emacs-lisp

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    (setq projectile-completion-system 'ivy)
    (setq projectile-enable-caching nil)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Documents/Work")
      (setq projectile-project-search-path '("~/Documents/Work")))
    (setq projectile-switch-project-action #'projectile-dired))

  (zyrb/leader-key-def
    "pf"  'counsel-projectile-find-file
    "pF"  'counsel-projectile-rg
    "pp"  'counsel-projectile-switch-project
    "pl"  'counsel-projectile
    "ps"  'counsel-projectile-ag
    "pg"  'counsel-projectile-grep
    "pc"  'projectile-compile-project
    "pd"  'projectile-dired)

#+end_src

** Git

*** Magit
https://magit.vc/manual/magit/

#+begin_src emacs-lisp

  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; Add a super-convenient global binding for magit-status since
  ;; I use it 8 million times a day
  (global-set-key (kbd "C-M-;") 'magit-status)

  (zyrb/leader-key-def
    "g"   '(:ignore t :which-key "git")
    "gs"  'magit-status
    "gd"  'magit-diff-unstaged
    "gc"  'magit-branch-or-checkout
    "gl"   '(:ignore t :which-key "log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb"  'magit-branch
    "gP"  'magit-push-current
    "gp"  'magit-pull-branch
    "gf"  'magit-fetch
    "gF"  'magit-fetch-all
    "gr"  'magit-rebase)

#+end_src

*** Forge

#+begin_src emacs-lisp

  (use-package forge
    :disabled)

#+end_src

*** magit-todos

This is an interesting extension to Magit that shows a TODOs section in your
git status buffer containing all lines with TODO (or other similar words) in
files contained within the repo.  More information at the [[https://github.com/alphapapa/magit-todos][GitHub repo]].

#+begin_src emacs-lisp

  (use-package magit-todos
    :defer t)

#+end_src

*** git-link

#+begin_src emacs-lisp

  (use-package git-link
    :commands git-link
    :config
    (setq git-link-open-in-browser t)
    (zyrb/leader-key-def
      "gL"  'git-link))

#+end_src

*** Git Gutter

#+begin_src emacs-lisp

  (use-package git-gutter-fringe)

  (use-package git-gutter
    :diminish
    :hook ((text-mode . git-gutter-mode)
           (prog-mode . git-gutter-mode))
    :config
    (setq git-gutter:update-interval 2)
    (set-face-foreground 'git-gutter-fr:added "LightGreen")
    (fringe-helper-define 'git-gutter-fr:added nil
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX")

    (set-face-foreground 'git-gutter-fr:modified "LightGoldenrod")
    (fringe-helper-define 'git-gutter-fr:modified nil
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX")

    (set-face-foreground 'git-gutter-fr:deleted "LightCoral")
    (fringe-helper-define 'git-gutter-fr:deleted nil
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX")

    ;; These characters are used in terminal mode
    (setq git-gutter:modified-sign "≡")
    (setq git-gutter:added-sign "≡")
    (setq git-gutter:deleted-sign "≡")
    (set-face-foreground 'git-gutter:added "LightGreen")
    (set-face-foreground 'git-gutter:modified "LightGoldenrod")
    (set-face-foreground 'git-gutter:deleted "LightCoral"))

#+end_src

** Languages

*** Language Server Support

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :custom
    ;; enable log only for debug
    ;; (lsp-log-io nil)
    ;; turn off for better performance
    (lsp-enable-symbol-highlighting nil)
    ;; auto restart lsp
    (lsp-restart 'auto-restart)
    (lsp-enable-folding nil)
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-idle-delay 0.500)
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    (lsp-enable-which-key-integration t)
    (lsp-enable-file-watchers nil)
    (lsp-rust-analyzer-server-display-inlay-hints t))

    (zyrb/leader-key-def
      "l"  '(:ignore t :which-key "lsp")
      "ld" 'xref-find-definitions
      "lr" 'xref-find-references
      "ln" 'lsp-ui-find-next-reference
      "lp" 'lsp-ui-find-prev-reference
      "ls" 'counsel-imenu
      "le" 'lsp-ui-flycheck-list
      "lS" 'lsp-ui-sideline-mode)

    (use-package lsp-ui
      :hook (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-peek-always-show t)
      (lsp-ui-sideline-enable t)
      (lsp-ui-sideline-show-hover nil)
      (lsp-ui-doc-enable nil))
    ;;(lsp-ui-doc-position 'bottom)
    ;;(lsp-ui-doc-show)

    (use-package lsp-ivy
      :after lsp)

#+end_src

*** Meta Lisp

Here are packages that are useful across different Lisp and Scheme implementations:

#+begin_src emacs-lisp

  (use-package lispy
    :hook ((emacs-lisp-mode . lispy-mode)
           (scheme-mode . lispy-mode)))

  (use-package lispyville
    :disabled
    :hook ((lispy-mode . lispyville-mode))
    :config
    (lispyville-set-key-theme '(operators c-w additional)))

#+end_src

*** TypeScript and JavaScript

Set up nvm so that we can manage Node versions

#+begin_src emacs-lisp

  (use-package nvm
    :defer t)

#+end_src

Configure TypeScript and JavaScript language modes

#+begin_src emacs-lisp
  ;; here for structure templates in org-mode
  (use-package typescript-mode)

  (use-package web-mode
    :ensure t
    :hook (web-mode . lsp-deferred)
    :mode (("\\.js\\'" . web-mode)
           ("\\.jsx\\'" . web-mode)
           ("\\.ts\\'" . web-mode)
           ("\\.tsx\\'" . web-mode)
           ("\\.html\\'" . web-mode)
           ("\\.vue\\'" . web-mode)
           ("\\.json\\'" . web-mode))
    :custom
    (lsp-clients-typescript-server-args '("--stdio" "--tsserver-log-file" "/dev/stderr"))
    :config
    (setq company-tooltip-align-annotations t)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-part-face t)
    (setq js2-indent-switch-body t)
    (setq js2-jsx-mode 2)
    (setq js2-highlight-level 3)
    (setq web-mode-enable-auto-quoting nil)
    (setq web-mode-content-types-alist
        '(("jsx" . "\\.js[x]?\\'")
          ("jsx" . "\\.tsx?\\'")))
    )

#+end_src

*** Rust

#+begin_src emacs-lisp

  (use-package rustic
    :ensure t
    ;; :mode "\\.rs\\'"
    :hook (rustic-mode . lsp-deferred)
    :config
    (setq rustic-format-on-save t))

  (zyrb/leader-key-def
    "l"  '(:ignore t :which-key "lsp")
    "la" 'lsp-execute-code-action
    "lr" 'lsp-rename
    "lq" 'lsp-workspace-restart
    "lQ" 'lsp-workspace-shutdown
    "ls" 'lsp-rust-analyzer-status)

#+end_src

*** Emacs Lisp

#+begin_src emacs-lisp

  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (zyrb/leader-key-def
    "e"   '(:ignore t :which-key "eval")
    "eb"  '(eval-buffer :which-key "eval buffer"))

  (zyrb/leader-key-def
    :keymaps '(visual)
    "er" '(eval-region :which-key "eval region"))

#+end_src

*** Markdown

#+begin_src emacs-lisp

  (defun zyrb/set-markdown-header-font-sizes ()
    (dolist (face '((markdown-header-face-1 . 1.2)
                    (markdown-header-face-2 . 1.1)
                    (markdown-header-face-3 . 1.0)
                    (markdown-header-face-4 . 1.0)
                    (markdown-header-face-5 . 1.0)))
      (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))

  (defun zyrb/markdown-mode-hook ()
    (zyrb/set-markdown-header-font-sizes))

  (use-package markdown-mode
    :pin melpa-stable
    :mode "\\.md\\'"
    :hook (markdown-mode zyrb/markdown-mode-hook)
    :config
    (setq markdown-command "marked"))

#+end_src

*** YAML

#+begin_src emacs-lisp

  (use-package yaml-mode
    :mode "\\.ya?ml\\'")

#+end_src

** Productivity

*** Syntax checking with Flycheck

#+begin_src emacs-lisp

  (use-package flycheck
    :defer t
    :hook (lsp-mode . flycheck-mode))

#+end_src

*** Multiple Cursors


#+begin_src emacs-lisp

  (use-package multiple-cursors)

  (define-key global-map (kbd "M-m") 'mc/mark-next-like-this)
  (define-key global-map (kbd "M-u") 'mc/mark-all-like-this)

#+end_src

*** Prettier

#+begin_src emacs-lisp

  (use-package prettier-js
    :hook((web-mode . prettier-js-mode))
    :custom
    (prettier-js-show-errors nil)
    (prettier-js-args '(
      "--trailing-comma" "es5"
      "--bracket-spacing" "true"
      "--arrow-parens" "always"
      "--print-width" "100"
    )))

#+end_src

*** Company

#+begin_src emacs-lisp


  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection)
                ("C-n" . company-select-next)
                ("C-p" . company-select-previous)
                ("M-<". company-select-first)
                ("M->". company-select-last))
    (:map lsp-mode-map
          ("<tab>". tab-indent-or-complete)
          ("TAB". tab-indent-or-complete))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.5))

  (defun company-yasnippet-or-completion ()
    (interactive)
    (or (do-yas-expand)
        (company-complete-common)))

  (defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
        (backward-char 1)
        (if (looking-at "\\.") t
          (backward-char 1)
          (if (looking-at "::") t nil)))))

  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas/minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))
  ;; (use-package company-box
  ;;   :hook (company-mode . company-box-mode))

  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode 1))

#+end_src

*** Snippets

#+begin_src emacs-lisp

  (use-package yasnippet
    :ensure t
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))

#+end_src

*** Smart Parens

#+begin_src emacs-lisp

  (use-package smartparens
    :hook (prog-mode . smartparens-mode))

#+end_src

*** Rainbow Delimiters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

*** Rainbow Mode

Sets the background of HTML color strings in buffers to be the color mentioned.

#+begin_src emacs-lisp

  (use-package rainbow-mode
    :defer t
    :hook (org-mode
           emacs-lisp-mode
           web-mode
           typescript-mode
           js2-mode))

#+end_src

** Tools
